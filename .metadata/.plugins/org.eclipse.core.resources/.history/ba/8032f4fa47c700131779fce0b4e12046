import java.io.Closeable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class DBConnection {
	
	private Connection connect = null;
	private Statement statement = null;
	private PreparedStatement preparedStatement = null;
	private ResultSet resultSet = null;
	
	public enum TableNames{
		CONTAIN(0),CUSTOMERS(1),EMPLOYEES(2),HAS(3),INVENTORY(4),STORES(5),TRANSACTIONS(6),NETWORTH(7);
		private int value;
		private TableNames(int val){
				this.value = value;
		}
		
	}

	
	
	public DBConnection(String connectonInfo){
		//connect to DB
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			connect = DriverManager.getConnection(connectonInfo);
			statement = connect.createStatement();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void close(){
		try {
			statement.close();
			connect.close();
			resultSet.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch(Exception e2){
			e2.printStackTrace();
		}
		
		
	}
	
	public void query(String query, TableNames select){
		try {
			resultSet = statement.executeQuery(query);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			System.out.println(query);
			close();
			e1.printStackTrace();
		}
		try{
			if(select == TableNames.CONTAIN){
				resultContain(resultSet);
			}else if(select == TableNames.CUSTOMERS){
				resultCustomers(resultSet);
			}else if(select == TableNames.EMPLOYEES){
				resultEmployees(resultSet);
			}else if(select == TableNames.HAS){
				resultHas(resultSet);
			}else if(select == TableNames.INVENTORY){
				resultInventory(resultSet);
			}else if(select == TableNames.STORES){
				resultStores(resultSet);
			}else if(select == TableNames.TRANSACTIONS){
				resultTransactions(resultSet);
			}else if(select == TableNames.NETWORTH){
				resultNetWorth(resultSet);
			}
			else return;
		}catch (Exception e){
			close();
			e.printStackTrace();
		}
	}
	
	public void insert(String query, TableNames select){
		int result=0;
		try {
			result = statement.executeUpdate(query);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			System.out.println(query);
			close();
			e1.printStackTrace();
		}
		try{
			if(select == TableNames.CONTAIN){
				resultInsertContain(result);
			}else if(select == TableNames.CUSTOMERS){
				resultInsertCustomers(result);
			}else if(select == TableNames.EMPLOYEES){
				resultInsertEmployees(result);
			}else if(select == TableNames.HAS){
				resultInsertHas(result);
			}else if(select == TableNames.INVENTORY){
				resultInsertInventory(result);
			}else if(select == TableNames.STORES){
				resultInsertStores(result);
			}else if(select == TableNames.TRANSACTIONS){
				resultInsertTransactions(result);
			}
			else return;
		}catch (Exception e){
			close();
			e.printStackTrace();
		}
	}
	
	public ResultSet getData(String query){
		try{
			resultSet = statement.executeQuery(query);
			return resultSet;
		}catch (SQLException e1) {
			// TODO Auto-generated catch block
			close();
			e1.printStackTrace();
	    }
		return null;
	}
	
	public int getPrice(String itemID){
		try{
			resultSet = statement.executeQuery("SELECT price FROM Inventory WHERE itemID = " + itemID);
			resultSet.next();
			return resultSet.getInt("price");
		}catch (SQLException e1) {
			// TODO Auto-generated catch block
			System.out.println("SELECT price FROM Inventory WHERE itemID = " + itemID);
			close();
			e1.printStackTrace();
	    }
		return 0;
	}
	
	public String getLastID(TableNames t){
		String ret = null;
		try{
			switch(t){
			case CUSTOMERS:
				resultSet = statement.executeQuery("SELECT MAX(customerID) AS cid FROM Customers");
				return resultSet.getString("cid");
				
			case EMPLOYEES:
				resultSet = statement.executeQuery("SELECT MAX(EmployeeID) AS eid FROM Employees");
				return resultSet.getString("eid");
				
			case INVENTORY:
				resultSet = statement.executeQuery("SELECT MAX(itemID) AS iid FROM Inventory");
				return resultSet.getString("iid");
				
			case STORES:
				resultSet = statement.executeQuery("SELECT MAX(locationNum) AS sid FROM Stores");
				return resultSet.getString("sid");
				
			case TRANSACTIONS:
				resultSet = statement.executeQuery("SELECT MAX(transactionID) AS tid FROM Transactions");
				return resultSet.getString("tid");
				
			default: return null;
			}
				
		}
	    catch (SQLException e1) {
			// TODO Auto-generated catch block
			close();
			e1.printStackTrace();
	    }
		return null;
	}
	
	public void delete(String query, TableNames select){
		int result=0;
		try {
			String query2 = query.replace("DELETE", "SELECT *");
			query(query2,select);
			result = statement.executeUpdate(query);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			System.out.println(query);
			close();
			e1.printStackTrace();
		}
		try{
			if(select == TableNames.CONTAIN){
				resultDeleteContain(result);
			}else if(select == TableNames.CUSTOMERS){
				resultDeleteCustomers(result);
			}else if(select == TableNames.EMPLOYEES){
				resultDeleteEmployees(result);
			}else if(select == TableNames.HAS){
				resultDeleteHas(result);
			}else if(select == TableNames.INVENTORY){
				resultDeleteInventory(result);
			}else if(select == TableNames.STORES){
				resultDeleteStores(result);
			}else if(select == TableNames.TRANSACTIONS){
				resultDeleteTransactions(result);
			}
			else return;
		}catch (Exception e){
			close();
			e.printStackTrace();
		}
	}
	
	private void resultContain(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		//System.out.println("Transaction ID\t\tItem ID");
		List<String> itemID = new ArrayList<String>();
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      itemID.add(resultSet.getString("itemID"));
	    }
	    for(int i=0;i<itemID.size(); i++){
	    	query("SELECT * FROM Inventory WHERE itemID = " + itemID.get(i),TableNames.INVENTORY);
	    }
	  }
	
	private void resultCustomers(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
	    System.out.println("customerID\tname\t\t\tphone\t\taddress\t\t\temail\t\t\t\tCustomerSince\t\t\t\tdiscount");
		while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      int customerID = resultSet.getInt("customerID");
	      String name = resultSet.getString("name");
	      String phone = resultSet.getString("phone");
	      String address = resultSet.getString("address");
	      String email = resultSet.getString("email");
	      Timestamp customerSince = resultSet.getTimestamp("customerSince");
	      int discount = resultSet.getInt("discount");
	      
	      if(name.length()<10)name+="\t\t";
	      else if(name.length()<15)name+='\t';
	      if(address.length()<20)address+="\t";
	      
	      System.out.print(customerID+"\t\t");
	      System.out.print(name+"\t");
	      System.out.print(phone+"\t");
	      System.out.print(address+"\t");
	      System.out.print(email+"\t\t");
	      System.out.print(customerSince+"\t\t\t");
	      System.out.println(discount);

	    }
	  }
	
	private void resultEmployees(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		System.out.println("employeeID\tSSN\t\tName\t\t\tRank\t\t\tWage\t\tEmployeeSince\t\t\t\tlocationNum");
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      int employeeID = resultSet.getInt("employeeID");
	      String ssn = resultSet.getString("ssn");
	      String name = resultSet.getString("name");
	      String rank = resultSet.getString("rank");
	      Double wage = resultSet.getDouble("wage");
	      Timestamp employeeSince = resultSet.getTimestamp("employeeSince");
	      int locationNum = resultSet.getInt("locationNum");
	      
	      //if(name.length()<8)name+="\t\t";
	      if(name.length()<8)name+="    ";
	      
	      System.out.print(employeeID + "\t\t");
	      System.out.print(ssn + '\t');
	      System.out.print(name + "\t\t");
	      System.out.print(rank + "\t\t");
	      System.out.print(wage + "\t\t");
	      System.out.print(employeeSince + "\t\t\t");
	      System.out.println(locationNum);

	    }
	  }
	
	private void resultHas(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		System.out.println("locationNum\titemID\t\tcount");
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      int locationNum = resultSet.getInt("locationNum");
	      int itemID = resultSet.getInt("itemID");
	      int count = resultSet.getInt("count");
	      
	      
	      
	      System.out.print(locationNum + "\t\t");
	      System.out.print(itemID + "\t\t");
	      System.out.println(count);
	    }
	  }
	
	private void resultInventory(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		System.out.println("itemID\tName\t\tType\t\tPrice");
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      int itemID = resultSet.getInt("itemID");
	      String name = resultSet.getString("name");
	      String type = resultSet.getString("type");
	      int price = resultSet.getInt("price");
	      
	      System.out.print(itemID + "\t");
	      System.out.print(name + '\t' );
	      System.out.print(type + '\t');
	      System.out.println(price);


	    }
	  }
	
	private void resultStores(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		System.out.println("locationNum\tAddress\t\t\t\tManagerName");
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      int locatonNum = resultSet.getInt("locationNum");
	      String address = resultSet.getString("address");
	      String managerName = resultSet.getString("managerName");
	      
	      
	      System.out.print(locatonNum + "\t\t");
	      System.out.print(address + '\t' + '\t');
	      System.out.println(managerName);

	    }
	  }
	
	private void resultTransactions(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		//System.out.println("transactionID\tTotal\t\tTimestamp\t\t\tCustomerID\tLocationNum");
		List<String> transactionID = new ArrayList<String>();
		List<String> total = new ArrayList<String>();
		List<Timestamp> timestamp = new ArrayList<Timestamp>();
		List<String> customerID = new ArrayList<String>();
		List<String> locationNum = new ArrayList<String>();
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      transactionID.add( resultSet.getString("transactionID"));
	      total.add(resultSet.getString("total"));
	      timestamp.add( resultSet.getTimestamp("timestamp"));
	      customerID.add( resultSet.getString("customerID"));
	      locationNum.add(resultSet.getString("locationNum"));

	    }
	    for(int i=0; i<transactionID.size(); i++){
	      System.out.println("transactionID\tTotal\t\tTimestamp\t\t\tCustomerID\tLocationNum");
	      System.out.print(transactionID.get(i) + "\t\t");
	      System.out.print(total.get(i) + "\t\t");
	      System.out.print(timestamp.get(i).toString() + '\t' + '\t');
	      System.out.print(customerID.get(i) + "\t\t");
	      System.out.println(locationNum.get(i));
	      System.out.println("*****Contents*****");
	      query("SELECT * FROM Contain WHERE transactionID = " + transactionID.get(i), TableNames.CONTAIN);
	    }
	  }

	private void resultNetWorth(ResultSet resultSet) throws SQLException {
	    // resultSet is initialised before the first data set
		System.out.println("Net Worth");
	    while (resultSet.next()) {
	      // it is possible to get the columns via name
	      // also possible to get the columns via the column number
	      // which starts at 1
	      // e.g., resultSet.getSTring(2);
	      //String locationNum = resultSet.getString("locationNum");
	      double netWorth = resultSet.getDouble("inventoryWorth");
	      
	      //System.out.print(locationNum + "\t\t");
	      System.out.println("$" + netWorth);
	      

	    }
	  }
	//INSERTIONS***********************************************************************************************************
	private void resultInsertContain(int result) throws SQLException {
		ResultSet resultSet = null;
		if(result>0){
			System.out.println("Data inserted.");
		}
		else System.out.println("Nothing Inserted into Table.");
	}
	
	private void resultInsertCustomers(int resultSet) throws SQLException {
	    if(resultSet>0){
	    	query("SELECT * FROM Customers WHERE customerID = (SELECT MAX(customerID) FROM Customers)", TableNames.CUSTOMERS);
	    }
	}
	
	private void resultInsertEmployees(int resultSet) throws SQLException {
		if(resultSet>0){
			query("SELECT * FROM Employees WHERE employeeID = (SELECT MAX(employeeID) FROM Employees)",TableNames.EMPLOYEES);
		}
	}
	
	private void resultInsertHas(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println("Inserted Data");
		}
	}
	
	private void resultInsertInventory(int resultSet) throws SQLException {
	    if(resultSet>0){
	    	query("SELECT * FROM Inventory WHERE itemID = (SELECT MAX(itemID) FROM Inventory)", TableNames.INVENTORY);
	    }
	}
	
	private void resultInsertStores(int resultSet) throws SQLException {
	    if(resultSet>0){
	    	query("SELECT * FROM Stores WHERE locationNum = (SELECT MAX(locationNum) FROM Stores)", TableNames.STORES);
	    }
	}
	
	private void resultInsertTransactions(int resultSet) throws SQLException {
	    if(resultSet>0){
	    	query("SELECT * FROM Transactions WHERE transactionID = (SELECT MAX(transactionID) FROM Transactions)", TableNames.TRANSACTIONS);
	    }
	}
	
	//MODIFICATIONS***************************************************************************************************************************
	private void resultModifyContain(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	public void modifyCustomers(String customerID,String name, String phone, String address, String email, String discount) throws SQLException {
		ResultSet result = getData("SELECT * FROM Customers WHERE customerID = '" + customerID + '\'');
		
		
		String newName, newPhone, newAddr, newEmail, newDisc;
		newName = newPhone = newAddr = newEmail = newDisc = null;
		
		result.next();
		try{
			newName = result.getString("name");
			newPhone = result.getString("phone");
			newAddr = result.getString("address");
			newEmail = result.getString("email");
			newDisc = result.getString("discount");
			
			if(name!=null){
				newName = name;
			}
			
			
			if(phone!=null){
				newPhone = phone;
			}
			
			
			if(address!=null){
				newAddr = address;
			}
			
			
			if(email!=null){
				newEmail =email;
			}
			
			
			if(discount!=null){
				newDisc = discount;
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}
		System.out.println("customerID\tname\t\t\tphone\t\taddress\t\t\temail\t\t\t\tCustomerSince\t\t\t\tdiscount");
		try {
			//updated data
			System.out.print(customerID+"\t\t");
		    System.out.print(newName+"\t");
		    System.out.print(newPhone+"\t");
		    System.out.print(newAddr+"\t");
		    System.out.print(newEmail+"\t\t");
			System.out.print(result.getTimestamp("customerSince").toString()+"\t\t\t");
		    System.out.println(newDisc);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int res = statement.executeUpdate("UPDATE Customers SET name = '" + newName+"', phone = '"+newPhone+"', address = '"+newAddr+"', email = '"+newEmail+"', discount = '"+newDisc+"' WHERE customerID = " + customerID);
		if(res>0)System.out.println(res + " Rows Changed");
		else System.out.println("No rows changed");
	}
	
	public void modifyEmployees(String employeeID,String ssn, String name, String rank, String wage, String locationNum) throws SQLException {
		ResultSet result = getData("SELECT * FROM Employees WHERE employeeID = '" + employeeID + '\'');
		
		
		String newSSN, newName, newRank, newWage, newLoc;
		newSSN = newName = newRank = newWage = newLoc = null;
		
		result.next();
		try{
			newSSN = result.getString("ssn");
			newName = result.getString("name");
			newRank = result.getString("rank");
			newWage = result.getString("wage");
			newLoc = result.getString("locationNum");
			
			if(ssn!=null){
				newSSN = ssn;
			}
	
			if(name!=null){
				newName = name;
			}
	
			if(rank!=null){
				newRank = rank;
			}
	
			if(wage!=null){
				newWage =wage;
			}
	
			if(locationNum!=null){
				newLoc = locationNum;
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}
		System.out.println("employeeID\tSSN\t\tName\t\t\tRank\t\t\tWage\t\tEmployeeSince\t\t\t\tlocationNum");
		try {
			if(newName.length()<8)newName+="    ";
			//updated data
			System.out.print(employeeID+"\t\t");
		    System.out.print(newSSN+"\t");
		    System.out.print(newName+"\t\t");
		    System.out.print(newRank+"\t\t");
		    System.out.print(newWage+"\t\t");
			System.out.print(result.getTimestamp("employeeSince").toString()+"\t\t\t");
		    System.out.println(newLoc);  
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int res = statement.executeUpdate("UPDATE Employees SET ssn = '" + newSSN+"', name = '"+newName+"', rank = '"+newRank+"', wage = '"+newWage+"', locationNum = '"+newLoc+"' WHERE employeeID = " + employeeID);
		if(res>0)System.out.println(res + " Rows Changed");
		else System.out.println("No rows changed");
	}
	
	public void modifyInventory(String itemID,String name, String type, String price) throws SQLException {
		ResultSet result = getData("SELECT * FROM Inventory WHERE itemID = '" + itemID + '\'');
		
		String newItemName, newType, newPrice;
		newItemName = newType = newPrice = null;
		
		result.next();
		try{
			newItemName = result.getString("name");
			newType = result.getString("type");
			newPrice=result.getString("price");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		if(name != null){
			newItemName = name;
		}
		if(type!=null){
			newType = type;
		}
		if(price!=null){
			newPrice=price;
		}
		System.out.println("itemID\tName\t\tType\t\tPrice");
		System.out.print(itemID + "\t");
	    System.out.print(newItemName + '\t' );
	    System.out.print(newType + '\t' + '\t');
	    System.out.println(newPrice);
	    
	    int res = statement.executeUpdate("UPDATE Inventory SET name = '" + newItemName+"', type = '"+newType+"', price = '"+newPrice + "' WHERE itemID = " + itemID);
		if(res>0)System.out.println(res + " Rows Changed");
		else System.out.println("No rows changed");
		
	}
	
	public void modifyStore(String locationNum ,String address, String manager) throws SQLException {
		ResultSet result = getData("SELECT * FROM Stores WHERE locationNum = '" + locationNum + '\'');
		
		String newAddress, newManager;
		newAddress = newManager = null;
		
		result.next();
		try{
			newAddress = result.getString("address");
			newManager = result.getString("managerName");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		if(address != null){
			newAddress = address;
		}
		if(manager!=null){
			newManager = manager;
		}
		System.out.println("locationNum\tAddress\t\t\t\tManagerName");
		System.out.print(locationNum + "\t\t");
	    System.out.print(newAddress + '\t'+ '\t' );
	    System.out.println(newManager);
	    
	    int res = statement.executeUpdate("UPDATE Stores SET address = '" + newAddress+"', managerName = '"+ newManager + "' WHERE locationNum = " + locationNum);
		if(res>0)System.out.println(res + " Rows Changed");
		else System.out.println("No rows changed");
		
	}
	
	public void modifyTransaction(String transactionID,String total, String customerID, String locationNum) throws SQLException {
		ResultSet result = getData("SELECT * FROM Transactions WHERE transactionID = '" + transactionID + '\'');
		
		String newTotal, newCustomer, newLocation;
		newTotal = newCustomer = newLocation = null;
		Timestamp t = null;
		
		result.next();
		try{
			newTotal = result.getString("total");
			newCustomer = result.getString("customerID");
			newLocation=result.getString("locationNum");
			t=result.getTimestamp("timestamp");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		if(total != null){
			newTotal = total;
		}
		if(customerID!=null){
			newCustomer = customerID;
		}
		if(locationNum!=null){
			newLocation = locationNum;
		}
		System.out.println("transactionID\tTotal\t\tTimestamp\t\t\tCustomerID\tLocationNum");
		System.out.print(transactionID + "\t\t");
	    System.out.print(newTotal + "\t\t");
	    System.out.print(t.toString() + '\t' + '\t');
	    System.out.print(newCustomer + "\t\t");
	    System.out.println(newLocation);
	    
	    int res = statement.executeUpdate("UPDATE Transactions SET total = '" + newTotal+"', customerID = '"+newCustomer+"', locationNum = '"+newLocation + "' WHERE transactionID = " + transactionID);
		if(res>0)System.out.println(res + " Rows Changed");
		else System.out.println("No rows changed");
		
	}
	//DELETIONS***************************************************************************************************************************
	private void resultDeleteContain(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	private void resultDeleteCustomers(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	private void resultDeleteEmployees(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	private void resultDeleteHas(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	private void resultDeleteInventory(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	private void resultDeleteStores(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
	
	private void resultDeleteTransactions(int resultSet) throws SQLException {
		if(resultSet>0){
			System.out.println(resultSet + " rows deleted");
		}
		else System.out.println("Nothing Deleted in Table.");
	}
}
